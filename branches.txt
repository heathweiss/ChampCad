

master/gmsh:

Commented out GL.insert as there will no longer be a need to insert that data in the BuilderStateData.
However, will still need to make the lines, and their id and points, so they can be printed out as gmsh script, so don't delete yet.

Commented out a lot of tests, as GB.ExceptStackCornerPointsBuilder now has IO at the btm. Will need to rewrite these tests using the underlying
fx's, without the monad stack, or figure out how to write tests in IO monad.
 

GB.ExceptStackCornerPointsBuilder return type  is now GC.BuilderMonadData
It has a separate constructor for each type of data, so far:(the alternative is a single constructor with Maybe values).
BuilderMonadData_CPoints: allow to build up [CPts]
BuilderMonadData_GPoints: allow to build up a [] of gmsh point id's.
BuilderMonadData_Points: extract target Pts.Points from the CPts, so they can be converted into gmsh points.


Added the ability to extract Points from CPts, and return as BuilderMonadData_Points.
Need to clean this up. See firstTest.

master->gmsh->gmsh_gpoints
Next:
done:Create the gmsh points from the [Point], and save them to state, as well as the current BuilderMonadData value.
commit: 'can create gpoints from points'
-can: git reset --hard HEAD 
 or   
      git reset --hard 'can create gpoints from points'
-done:Create a GPointId type, to have a [GPointId] for the current builder monad value.
 It is a newtype wrapper around the current Int value required by gmsh.
 Change the BuilderStateData [point id] from int to GPointId
commit: 'GPointId done'


