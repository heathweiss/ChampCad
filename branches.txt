-can: git reset --hard HEAD 
 or   
      git reset --hard 'can create gpoints from points'

master/gmsh:



done:
The  GMESH.Points.NonOverLappedClosedPoints newtype should go back to being a NonOverLappedClosedPoints [Pts]
instead of a [NonOverLappedClosedPoints], as it is a state of a list, rather than a list of states.
commit -m 'back to NonOverLappedClosedPoints [Pts]'
pushed to gmsh


done:
Create GPoints which contain a GPointId, and a set of (GADT?) constructors to indicate what they are.
eg: End points for a gmsh Line. Control point for a gmsh Circle.
Have a set of fx's that can convert the CPts.Pts into the target GPoint type.
Could then have a [GPoint] such as [EndPoint, EndpPoint, CircleCenter, EndPoint, EndPoint].
This would create a Line, Circle, Line. when converted to a Curve Loop.
--all that is done for creating Lines, though have not implemented other Curves such as Circle, Bezier...
--need to get rid of the GMSH.Builder.buildGPointIdLines as there should be no need for it.
commit -m 'Lines are now created from GPoints'

done:
Combine GMESH.Lines and GMESH.Builder.Lines, GMSH.Writer.Lines into GMESH.Curves.
Rename functions and ADT to reflect the name change.
Deleted the orignal <GMESH/Builder/Writer>Lines modules.
commit -m 'created GMESH.Curves.'
merged to master and pushed

done:
create a typeclass for showing the constructor as a string.
This will replace the CornerPoints.cpointType and GPoints.getType.
Note the use of Data<Data/Typeable> {-# LANGUAGE DeriveDataTypeable #-} and the deriving clauses.
commit -m 'created Showable class'
merged to master and pushed

done:
Renamed GPoints to CurvePoints, to  better reflect what they do.
Merged all CurvePoints into single module, and deleted all the old GPoints modules
commit -m 'Created CurvePoints'
pushed got origin gmsh


done:
Merged <GMSH/Builder/Writer> Points and CornerPoints into a single file: GMSH.CornerPoints.
Renamed some functions.
Deleted the old modules.
commit -m 'combine Points and CornerPoints into new module'

done:
rename LineId in BuilderStateData to CurveId
commited and pushed to master
git commit -m 'LineId is now CurverId'

done:
move Builder.Base into the new GMSH.Base module?
move Builder.Writer.Base into the GMSH.Writer module.
git commit -m '<Writer/Builder>.Base move up to GMSH.<Writer/Base> modules'
commit and push to master

done:
Renamed GPointId to CurvePointId, along with all related fx names.
git commit -m 'GPointId is now CurvePointId'

done:
Created Scriptable class which supply writeScript<s> which replaces writeGScript<s>ToFile functions in Curve and CurvePoints.
git commit -m 'created GMSH.Scriptable class'
merged to master and pushed.

next:
Create 2 showable classes.
1: TypeClasses.Showable should be renamed to ShowErorr and have things like showConstructor.
   ShowId is not applicable to things like CornerPoints.
2: Create GMSH.Show.ShowScript for things like showId.

next:
Think of a better name for GMSH.State so it is not confused with haskell state monad.
eg: GMSHState, GState

next:
create a Curve Loop, Wire, and Physical Curve, which should be separate from Curve, in that they hold [Curve]. eg: Curve Loop (1) = [Line 1, Line 2...].
Think of a name to describe these common ADT's: CurveCollection? CurveHolder? CurvePath?

next:
Refer to https://gist.github.com/seanhess/b17d4e3da88080c35542 on combing a ReaderT ExceptT to figure out how to better use the scanner db.



