-can: git reset --hard HEAD 
 or   
      git reset --hard 'can create gpoints from points'

master/gmsh:



done:
The  GMESH.Points.NonOverLappedClosedPoints newtype should go back to being a NonOverLappedClosedPoints [Pts]
instead of a [NonOverLappedClosedPoints], as it is a state of a list, rather than a list of states.
commit -m 'back to NonOverLappedClosedPoints [Pts]'
pushed to gmsh


done:
Create GPoints which contain a GPointId, and a set of (GADT?) constructors to indicate what they are.
eg: End points for a gmsh Line. Control point for a gmsh Circle.
Have a set of fx's that can convert the CPts.Pts into the target GPoint type.
Could then have a [GPoint] such as [EndPoint, EndpPoint, CircleCenter, EndPoint, EndPoint].
This would create a Line, Circle, Line. when converted to a Curve Loop.
--all that is done for creating Lines, though have not implemented other Curves such as Circle, Bezier...
--need to get rid of the GMSH.Builder.buildGPointIdLines as there should be no need for it.
commit -m 'Lines are now created from GPoints'

done:
Combine GMESH.Lines and GMESH.Builder.Lines, GMSH.Writer.Lines into GMESH.Curves.
Rename functions and ADT to reflect the name change.
Deleted the orignal <GMESH/Builder/Writer>Lines modules.
commit -m 'created GMESH.Curves.'
merged to master and pushed

done:
create a typeclass for showing the constructor as a string.
This will replace the CornerPoints.cpointType and GPoints.getType.
Note the use of Data<Data/Typeable> {-# LANGUAGE DeriveDataTypeable #-} and the deriving clauses.
commit -m 'created Showable class'
merged to master and pushed

next:
Think of a better name for GPoints, to better reflect what they do.
eg: CurvePoints

next:
create a Curve Loop, Wire, and Physical Curve, which should be separate from Curve, in that they hold [Curve]. eg: Curve Loop (1) = [Line 1, Line 2...].
Think of a name to describe these common ADT's: CurveCollection? CurveHolder? CurvePath?

next:
rename GMSH.Lines.Line to Curves, to match how gmsh the group of related items such as Line, Circle, Bezier ..., which share a common Id system and can be used
within Curve Loop.
Should also rename in BulderStateData for their id.



next:
Look at combining the modules from GMSH, Builder, and Writer.
eg: GMSH.GPoints, GMSH.Builder.GPoints, and GMSH.Writer.GPoints could all be in the same module to save confusion of being all spread out.


next:
Figure out a folder name to contain all the gmesh modules aready not in something like Builder or Writer.
If I get rid of Builder/Writer folders by combining modules, will not have to do this.

next:
Refer to https://gist.github.com/seanhess/b17d4e3da88080c35542 on combing a ReaderT ExceptT to figure out how to better use the scanner db.



