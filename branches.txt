================================================ dec14.23 ============================================
Created the new OpenSCad set of modules to create scripts.

/home/heath/haskell/ChampCad/.stack-work/install/x86_64-linux-tinfo6/b9fe1f97d1a4be9f8d4ebce0fb245e19d92a3e50c4ffc9627a886439feb65f2f/9.4.8/doc/index.html
================================================ dec13.23 ============================================
Pulled from github and built for 1st time in 3-4 years.
Had to update to the latest stack lts to build it.
Had to fix errors assoc'd with the lts upgrade.
Added *.gcode to to .gitignore











-can: git reset --hard HEAD 
 or   
      git reset --hard 'can create gpoints from points'

master/gmsh:



done:
The  GMESH.Points.NonOverLappedClosedPoints newtype should go back to being a NonOverLappedClosedPoints [Pts]
instead of a [NonOverLappedClosedPoints], as it is a state of a list, rather than a list of states.
commit -m 'back to NonOverLappedClosedPoints [Pts]'
pushed to gmsh


done:
Create GPoints which contain a GPointId, and a set of (GADT?) constructors to indicate what they are.
eg: End points for a gmsh Line. Control point for a gmsh Circle.
Have a set of fx's that can convert the CPts.Pts into the target GPoint type.
Could then have a [GPoint] such as [EndPoint, EndpPoint, CircleCenter, EndPoint, EndPoint].
This would create a Line, Circle, Line. when converted to a Curve Loop.
--all that is done for creating Lines, though have not implemented other Curves such as Circle, Bezier...
--need to get rid of the GMSH.Builder.buildGPointIdLines as there should be no need for it.
commit -m 'Lines are now created from GPoints'

done:
Combine GMESH.Lines and GMESH.Builder.Lines, GMSH.Writer.Lines into GMESH.Curves.
Rename functions and ADT to reflect the name change.
Deleted the orignal <GMESH/Builder/Writer>Lines modules.
commit -m 'created GMESH.Curves.'
merged to master and pushed

done:
create a typeclass for showing the constructor as a string.
This will replace the CornerPoints.cpointType and GPoints.getType.
Note the use of Data<Data/Typeable> {-# LANGUAGE DeriveDataTypeable #-} and the deriving clauses.
commit -m 'created Showable class'
merged to master and pushed

done:
Renamed GPoints to CurvePoints, to  better reflect what they do.
Merged all CurvePoints into single module, and deleted all the old GPoints modules
commit -m 'Created CurvePoints'
pushed got origin gmsh


done:
Merged <GMSH/Builder/Writer> Points and CornerPoints into a single file: GMSH.CornerPoints.
Renamed some functions.
Deleted the old modules.
commit -m 'combine Points and CornerPoints into new module'

done:
rename LineId in BuilderStateData to CurveId
commited and pushed to master
git commit -m 'LineId is now CurverId'

done:
move Builder.Base into the new GMSH.Base module?
move Builder.Writer.Base into the GMSH.Writer module.
git commit -m '<Writer/Builder>.Base move up to GMSH.<Writer/Base> modules'
commit and push to master

done:
Renamed GPointId to CurvePointId, along with all related fx names.
git commit -m 'GPointId is now CurvePointId'

done:
Created Scriptable class which supply writeScript<s> which replaces writeGScript<s>ToFile functions in Curve and CurvePoints.
git commit -m 'created GMSH.Scriptable class'
merged to master and pushed.

done:
fix tests. GMSHPointsTest has had everthing moved inside of State, as BuilderStateData has no exported constructor.
           GMSHLinesTest has everything commented out still, as it all deals with CornerPoints.
fix haddock: got haddock compiling again.
git commit -m 'tests and haddock fixed'

done:
create rio branch
change yaml resolver: lts-5.3 to lts-14.4
added Persistable.Base.asSqlBackendReader and changed a lot of examples to use it, so runSqlite can figure out it's type.
git commit -m 'upgraded to lts-14.4'
Tested some stl output on a shoe lift then merged back to master.
got rid of rio branch and back to working in gmsh branch


=================================================== stop the presses ===========================================
Was woring on the next item.
Will now create a new project, HasMesh, in order to get rid of a ton of extra baggage that was
created when I used CornerPoints to genertate my own meshes.


current:
Implement the ReaderT pattern via RIO:
Making the RIO.State module which will re-create the original state.


next:
Create 2 showable classes.
1: TypeClasses.Showable should be renamed to ShowErorr and have things like showConstructor.
   ShowId is not applicable to things like CornerPoints.
2: Create GMSH.Show.ShowScript for things like showId.

next:
Think of a better name for GMSH.State so it is not confused with haskell state monad.
eg: GMSHState, GState

next:
create a Curve Loop, Wire, and Physical Curve, which should be separate from Curve, in that they hold [Curve]. eg: Curve Loop (1) = [Line 1, Line 2...].
Think of a name to describe these common ADT's: CurveCollection? CurveHolder? CurvePath?

next:
Refer to https://gist.github.com/seanhess/b17d4e3da88080c35542 on combing a ReaderT ExceptT to figure out how to better use the scanner db.
Or look into Snoymans ReaderT pattern at: https://www.fpcomplete.com/blog/2017/06/readert-design-pattern.
-Is it possibly part to the RIO pkg from FPComplete? According to: https://github.com/commercialhaskell/rio, it is.


next:
Implement RIO as a new project. Good chance to get rid of all the CornerPoints infrastructure I created for meshing, as gmsh will handle that now.
Get rid of CornerPoints and all associated baggage, as should only need Points, which should be renamed to Vertex.
Redo x/y plane to iso standards. Will need to change the quandrant system.
Use the ReaderT pattern as per Snoyman tutorials.
google: "fpcomplete readerT pattern" for some other takes on the ReaderT pattern such as:
-https://www.tweag.io/posts/2018-10-04-capability.html
Look at using nix instead of stack which is what the about tweag.io post uses.
-https://maybevoid.com/posts/2019-01-27-getting-started-haskell-nix.html
